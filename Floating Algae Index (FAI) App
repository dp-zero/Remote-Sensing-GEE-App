Map.setCenter(0, 0, 2);
var lakes = ee.FeatureCollection("users/p1ding/GLB_INWTRA").filterMetadata('PERIMETER', 'greater_than', 50000);
var empty = ee.Image().byte();
// Paint all the polygon edges with the same number and width, display.
var outline = empty.paint({
  featureCollection: lakes,
  color: 1,
  width: 1
});
Map.addLayer(outline, {palette: '000000'}, 'Lakes & Rivers');

// User Input //
var iniDate = '2013-05-01'; 
var endDate = '2019-05-31';

var oliCloudPerc = 5
// landsat 8 raw dn
var OLI_DN = ee.ImageCollection('LANDSAT/LC08/C01/T1');

// landsat-8 surface reflactance product (for masking purposes)
var SRP = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR');

// toms / omi
var ozone = ee.ImageCollection('TOMS/MERGED');

// Filtering Collection and Masking //

var pi = ee.Image(3.141592);

// water mask
var startMonth = 5;
var endMonth = 9;
var startYear = 2013;
var endYear = 2017;
//OnClick Starts
Map.onClick(function(coords){
 var geometry = ee.Geometry.Point(coords.lon, coords.lat);
Map.centerObject(geometry,10);

var forMask = SRP.filterBounds(geometry).select('B6').filterMetadata('CLOUD_COVER', "less_than", 10).filter(ee.Filter.calendarRange(startMonth, endMonth, 'month')).filter(ee.Filter.calendarRange(startYear, endYear, 'year'));
var mask = ee.Image(forMask.select('B6').median().lt(600)) 
mask = mask.updateMask(mask)

// filter landsat 8 collection
var FC_OLI = OLI_DN.filterDate(iniDate, endDate).filterBounds(geometry).filterMetadata('CLOUD_COVER', "less_than", oliCloudPerc).sort("system:time_start");

////Mapping Function Starts
var result = FC_OLI.map(function(l8){
var l8_time = l8.get("system:time_start");
var l8_date = l8.get("DATE_ACQUIRED")
var footprint = l8.geometry();
// single Ls8 image Rayleigh Correction // 

// dem
var DEM_OLI = ee.Image('USGS/SRTMGL1_003').clip(footprint);

// ozone
var DU_OLI = ee.Image(ozone.filterDate(iniDate,endDate).filterBounds(footprint).mean());

//Julian Day
var imgDate_OLI = ee.Date(l8.get('system:time_start'));
var FOY_OLI = ee.Date.fromYMD(imgDate_OLI.get('year'),1,1);
var JD_OLI = imgDate_OLI.difference(FOY_OLI,'day').int().add(1); 

// Earth-Sun distance
var d_OLI = ee.Image.constant(l8.get('EARTH_SUN_DISTANCE'));

//Sun elevation
var SunEl_OLI = ee.Image.constant(l8.get('SUN_ELEVATION'));

//Sun azimuth
var SunAz_OLI = ee.Image.constant(l8.get('SUN_AZIMUTH'));

//Satellite zenith
var SatZe_OLI = ee.Image(0.0)
var cosdSatZe_OLI = (SatZe_OLI).multiply(pi.divide(ee.Image(180))).cos();
var sindSatZe_OLI = (SatZe_OLI).multiply(pi.divide(ee.Image(180))).sin();

//Satellite azimuth
var SatAz_OLI = ee.Image(0.0)

//Sun zenith
var SunZe_OLI = ee.Image(90).subtract(SunEl_OLI)
var cosdSunZe_OLI = SunZe_OLI.multiply(pi.divide(ee.Image.constant(180))).cos(); // in degrees
var sindSunZe_OLI = SunZe_OLI.multiply(pi.divide(ee.Image(180))).sin(); // in degrees

//Relative azimuth
var RelAz_OLI = ee.Image(SunAz_OLI);
var cosdRelAz_OLI = RelAz_OLI.multiply(pi.divide(ee.Image(180))).cos();

//Pressure calculation
var P_OLI = ee.Image(101325).multiply(ee.Image(1).subtract(ee.Image(0.0000225577).multiply(DEM_OLI)).pow(5.25588)).multiply(0.01);
var Po_OLI = ee.Image(1013.25);

// Radiometric Calibration //define bands to be converted to radiance
var bands_OLI = ['B1','B2','B3','B4','B5','B6','B7'];

// radiance_mult_bands
var rad_mult_OLI = ee.Image(ee.Array([ee.Image(l8.get('RADIANCE_MULT_BAND_1')),
                        ee.Image(l8.get('RADIANCE_MULT_BAND_2')),
                        ee.Image(l8.get('RADIANCE_MULT_BAND_3')),
                        ee.Image(l8.get('RADIANCE_MULT_BAND_4')),
                        ee.Image(l8.get('RADIANCE_MULT_BAND_5')),
                        ee.Image(l8.get('RADIANCE_MULT_BAND_6')),
                        ee.Image(l8.get('RADIANCE_MULT_BAND_7'))]
                        )).toArray(1);

// radiance add band                         
var rad_add_OLI = ee.Image(ee.Array([ee.Image(l8.get('RADIANCE_ADD_BAND_1')),
                        ee.Image(l8.get('RADIANCE_ADD_BAND_2')),
                        ee.Image(l8.get('RADIANCE_ADD_BAND_3')),
                        ee.Image(l8.get('RADIANCE_ADD_BAND_4')),
                        ee.Image(l8.get('RADIANCE_ADD_BAND_5')),
                        ee.Image(l8.get('RADIANCE_ADD_BAND_6')),
                        ee.Image(l8.get('RADIANCE_ADD_BAND_7'))]
                        )).toArray(1);

//create an empty image to save new radiance bands to
var imgArr_OLI = l8.select(bands_OLI).toArray().toArray(1);
var Ltoa_OLI = imgArr_OLI.multiply(rad_mult_OLI).add(rad_add_OLI)

// esun
var ESUN_OLI = ee.Image.constant(197.24790954589844)
                .addBands(ee.Image.constant(201.98426818847656))
                .addBands(ee.Image.constant(186.12677001953125))
                .addBands(ee.Image.constant(156.95257568359375))
                .addBands(ee.Image.constant(96.04714965820312))
                .addBands(ee.Image.constant(23.8833221450863))
                .addBands(ee.Image.constant(8.04995873449635)).toArray().toArray(1);
ESUN_OLI = ESUN_OLI.multiply(ee.Image(1))

var ESUNImg_OLI = ESUN_OLI.arrayProject([0]).arrayFlatten([bands_OLI]);

// Ozone Correction //
// Ozone coefficients
var koz_OLI = ee.Image.constant(0.0039).addBands(ee.Image.constant(0.0218))
                          .addBands(ee.Image.constant(0.1078))
                          .addBands(ee.Image.constant(0.0608))
                          .addBands(ee.Image.constant(0.0019))
                          .addBands(ee.Image.constant(0))
                          .addBands(ee.Image.constant(0))
                          .toArray().toArray(1);

// Calculate ozone optical thickness
var Toz_OLI = koz_OLI.multiply(DU_OLI).divide(ee.Image.constant(1000));

// Calculate TOA radiance in the absense of ozone
var Lt_OLI = Ltoa_OLI.multiply(((Toz_OLI)).multiply((ee.Image.constant(1).divide(cosdSunZe_OLI)).add(ee.Image.constant(1).divide(cosdSatZe_OLI))).exp());

// Rayleigh optical thickness
var bandCenter_OLI = ee.Image(443).divide(1000).addBands(ee.Image(483).divide(1000))
                                          .addBands(ee.Image(561).divide(1000))
                                          .addBands(ee.Image(655).divide(1000))
                                          .addBands(ee.Image(865).divide(1000))
                                          .addBands(ee.Image(1609).divide(1000))
                                          .addBands(ee.Number(2201).divide(1000))
                                          .toArray().toArray(1);

// create an empty image to save new Tr values to
var Tr_OLI = (P_OLI.divide(Po_OLI)).multiply(ee.Image(0.008569).multiply(bandCenter_OLI.pow(-4))).multiply((ee.Image(1).add(ee.Image(0.0113).multiply(bandCenter_OLI.pow(-2))).add(ee.Image(0.00013).multiply(bandCenter_OLI.pow(-4)))));

// Fresnel Reflection //
// Specular reflection (s- and p- polarization states)
var theta_V_OLI = ee.Image(0.0000000001);
var sin_theta_j_OLI = sindSunZe_OLI.divide(ee.Image(1.333));

var theta_j_OLI = sin_theta_j_OLI.asin().multiply(ee.Image(180).divide(pi));

var theta_SZ_OLI = SunZe_OLI;

var R_theta_SZ_s_OLI = (((theta_SZ_OLI.multiply(pi.divide(ee.Image(180)))).subtract(theta_j_OLI.multiply(pi.divide(ee.Image(180))))).sin().pow(2)).divide((((theta_SZ_OLI.multiply(pi.divide(ee.Image(180)))).add(theta_j_OLI.multiply(pi.divide(ee.Image(180))))).sin().pow(2)));

var R_theta_V_s_OLI = ee.Image(0.0000000001);

var R_theta_SZ_p_OLI = (((theta_SZ_OLI.multiply(pi.divide(180))).subtract(theta_j_OLI.multiply(pi.divide(180)))).tan().pow(2)).divide((((theta_SZ_OLI.multiply(pi.divide(180))).add(theta_j_OLI.multiply(pi.divide(180)))).tan().pow(2)));

var R_theta_V_p_OLI = ee.Image(0.0000000001);

var R_theta_SZ_OLI = ee.Image(0.5).multiply(R_theta_SZ_s_OLI.add(R_theta_SZ_p_OLI));

var R_theta_V_OLI = ee.Image(0.5).multiply(R_theta_V_s_OLI.add(R_theta_V_p_OLI));

// Rayleigh scattering phase function //
// Sun-sensor geometry
var theta_neg_OLI = ((cosdSunZe_OLI.multiply(ee.Image(-1))).multiply(cosdSatZe_OLI)).subtract((sindSunZe_OLI).multiply(sindSatZe_OLI).multiply(cosdRelAz_OLI));

var theta_neg_inv_OLI = theta_neg_OLI.acos().multiply(ee.Image(180).divide(pi));

var theta_pos_OLI = (cosdSunZe_OLI.multiply(cosdSatZe_OLI)).subtract(sindSunZe_OLI.multiply(sindSatZe_OLI).multiply(cosdRelAz_OLI));

var theta_pos_inv_OLI = theta_pos_OLI.acos().multiply(ee.Image(180).divide(pi));

var cosd_tni_OLI = theta_neg_inv_OLI.multiply(pi.divide(180)).cos(); // in degrees

var cosd_tpi_OLI = theta_pos_inv_OLI.multiply(pi.divide(180)).cos(); // in degrees

var Pr_neg_OLI = ee.Image(0.75).multiply((ee.Image(1).add(cosd_tni_OLI.pow(2))));

var Pr_pos_OLI = ee.Image(0.75).multiply((ee.Image(1).add(cosd_tpi_OLI.pow(2))));

// Rayleigh scattering phase function
var Pr_OLI = Pr_neg_OLI.add((R_theta_SZ_OLI.add(R_theta_V_OLI)).multiply(Pr_pos_OLI));

// Calulate Lr,
var denom_OLI = ee.Image(4).multiply(pi).multiply(cosdSatZe_OLI);
var Lr_OLI = (ESUN_OLI.multiply(Tr_OLI)).multiply(Pr_OLI.divide(denom_OLI));

// Rayleigh corrected radiance
var Lrc_OLI = (Lt_OLI.divide(ee.Image(10))).subtract(Lr_OLI);
var LrcImg_OLI = Lrc_OLI.arrayProject([0]).arrayFlatten([bands_OLI]);

// Rayleigh corrected reflectance
var prc_OLI = Lrc_OLI.multiply(pi).multiply(d_OLI.pow(2)).divide(ESUN_OLI.multiply(cosdSunZe_OLI));
var pc = prc_OLI.arrayProject([0]).arrayFlatten([bands_OLI]);

// Calculate FAI
var NIRprime = (pc.select('B4')).add((pc.select('B6').subtract(pc.select('B4'))).multiply((ee.Image(865).subtract(ee.Image(655))).divide((ee.Image(1609).subtract(ee.Image(655))))));
var fai = ((pc.select('B5').subtract(NIRprime))).multiply(mask);
fai = fai.set("system:time_start", l8_time).set("DATE_ACQUIRED", l8_date);
return fai;
});
////End of Mapping Function
var chosen_lake = lakes.filterBounds(geometry);

if (chosen_lake.first().getInfo()!== null){
var chart= ui.Chart.image.series(result,chosen_lake,ee.Reducer.mean(),10000)
.setOptions({
  title:'Average FAI of the chosen lake/river over time',
             hAxis: {'title': 'Year'},
             vAxis: {'title': 'FAI'},
             pointSize: 0,
             legend: {position:'none'},
    });
mypanel.widgets().set(3,chart);
}
else {
mypanel.widgets().set(3,ui.Label({
  value: 'Please click inside a INLAND WATERBODY to show the chart.',
  style: {
    fontWeight: 'bold',
    fontSize: '30px',
    color: 'red'
    }}))}

/// Select
var keys = result.aggregate_array("DATE_ACQUIRED");

var select = ui.Select({
  items: keys.getInfo(),
  //value: places,
  onChange: function(key) {
var layer = result.filterMetadata("DATE_ACQUIRED","equals",key).first();
var lake_image = layer.clip(chosen_lake);
var lake_layer = ui.Map.Layer(lake_image,{min: -0.05, max: 0.2, palette: ['000080','0080FF','7BFF7B','FF9700','800000']}, 'FAI', true);
Map.layers().set(1, lake_layer);
}
});
select.setPlaceholder('Choose a date...');

mypanel.widgets().set(5,select);
});
//End of OnClick
//////////////////////MAKE SELECT////////////////////
var list = ["Click on map to choose a lake"]
var select = ui.Select({
  items: list,
  onChange: function(key) {
}
});
select.setPlaceholder('Choose a date...');

//////////////////////MAKE CHART////////////////////
var chart = ui.Chart.array.values(ee.Array([0]), 0, ee.Array([0]))
            .setOptions({
             hAxis: {'title': 'Year'},
             vAxis: {'title': 'FAI'},
             pointSize: 0,
             legend: {position:'none'},
    });
var chartpanel = ui.Panel({
style: {
position: 'top-left',
}
});

////////////MAKE LEGEND//////////////////////////////////////////
var makeLegend=function(vis,title,from,to) {
  vis.bands=['longitude'];
  var lon = ee.Image.pixelLonLat().select('longitude');
  var gradient = lon.multiply((vis.max-vis.min)/100.0).add(vis.min);
  var legendImage = gradient.visualize(vis);

  // create image of gradient
  var thumb = ui.Thumbnail({
    image: legendImage, 
    params: {bbox:'0,0,100,8', dimensions:'256x20'},  
    style: {padding: '1px', position: 'bottom-center'}
  });

  //create title of legend
  var panel1 = ui.Panel({
    widgets: [
      ui.Label(title)]});
  
  //create labels of legend
  var panel2 = ui.Panel({
    widgets: [
      ui.Label(from), 
      ui.Label({style: {stretch: 'horizontal'}}), 
      ui.Label(to)],
    layout: ui.Panel.Layout.flow('horizontal'),
    style: {stretch: 'horizontal'}
  });
  
  // set position of panel the legend
  return ui.Panel().add(panel1).add(thumb).add(panel2);
};


///add legend

var pretty = {"opacity":0.8,"min":-0.05,"max":0.2,
              palette: ['000080','0080FF','7BFF7B','FF9700','800000']};
var mylegend=makeLegend(pretty,'FAI','-0.05','0.2');
 
var mypanel_legend = ui.Panel({
style: {
position: 'bottom-left',
padding: '8px 15px'
}
});
mypanel_legend.add(mylegend);
Map.add(mypanel_legend);

//////Button////////////////////

var button = ui.Button({
  label: 'Back to default view',
  onClick: function() {
    Map.setCenter(0, 0, 2);
  }
});

///Panel
var mypanel=ui.Panel({
style: {
position: 'top-right',
width: '400px'
}
});
mypanel.add(ui.Label({
  value: 'Using Floating Algae Index (FAI) from Landsat 8 imageries to analyze water quality of inland water',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    }}));
var myintro='This App uses FAI to show the concentration of algae on the water surface, '+'which reflects the water quality. '+'A lower FAI means less algae on the surface and the better water quality.';

mypanel.add(ui.Label(myintro));
//////////////////////////LINKs////////////
var mylink1 = ui.Label({
  value: 'Hu (2009)',
  targetUrl:'https://www.sciencedirect.com/science/article/abs/pii/S0034425709001710',
});
var bye1 =ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal')
})
bye1.add(ui.Label('For more details about FAI:'));
bye1.add(mylink1);

var mylink2 = ui.Label({
  value: 'Page, Kumar and Mishra (2018)',
  targetUrl:'https://github.com/SERVIR/water-quality-gee/blob/master/javascript/Ls8_FAI.js',
});
var bye2 =ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal')
})
bye2.add(ui.Label('Used code from:'));
bye2.add(mylink2);

var mylink3 = ui.Label({
  value: 'Susanne Benz',
  targetUrl:'http://bigpixel.ucsd.edu/people/benz.html',
});
var bye3 =ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal')
})
bye3.add(ui.Label('Big thanks to'));
bye3.add(mylink3);

mypanel.add(ui.Label('Please click on a inland waterbody to analyze its FAI over time.'));
mypanel.add(chart);
mypanel.add(ui.Label('Please choose a date to show the FAI image of the chosen water body.'));
mypanel.add(select);
mypanel.add(button);
mypanel.add(bye1);
mypanel.add(bye2);
mypanel.add(bye3);
Map.add(mypanel);
Map.setControlVisibility(false);
Map.setOptions('HYBRID');
Map.style().set('cursor', 'crosshair');
